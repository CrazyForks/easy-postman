# 菜单
menu.file=文件
menu.file.log=日志
menu.file.exit=退出
menu.theme=主题
menu.theme.light=浅色主题 (Flat Light)
menu.theme.intellij=IntelliJ 风格
menu.theme.mac=Mac 浅色风格
menu.language=语言
menu.settings=设置
menu.settings.global=全局设置
menu.help=帮助
menu.help.update=检查更新
menu.help.feedback=反馈
menu.about=关于
menu.about.easypostman=关于 EasyPostman
menu.collections=集合
menu.environments=环境
menu.functional=功能
menu.performance=性能
menu.history=历史
menu.workspaces=工作区
# 工作区相关
workspace.new=新建
workspace.create=创建工作区
workspace.name=名称
workspace.default.name=默认工作区
workspace.default.description=系统默认工作区，不可删除和重命名
workspace.description=描述
workspace.type=类型
workspace.type.local=本地工作区
workspace.type.git=Git 工作区
workspace.path=路径
workspace.select.path=选择路径
workspace.git.url=Git 仓库地址
workspace.git.username=用户名
workspace.git.password=密码
workspace.git.token=访问令牌
workspace.git.auth.type=认证方式
workspace.git.auth.none=无认证
workspace.git.auth.password=用户名密码
workspace.git.auth.token=访问令牌
workspace.git.auth.ssh=SSH 密钥
workspace.clone.from.remote=从远程仓库克隆
workspace.init.local=本地初始化后推送
workspace.rename=重命名
workspace.delete=删除
workspace.delete.confirm=确定删除工作区 "{0}" 吗？
workspace.switch=切换工作区
workspace.info=工作区信息
workspace.git.pull=拉取更新
workspace.git.push=推送变更
workspace.git.commit=提交变更
workspace.validation.name.required=请输入工作区名称
workspace.validation.path.required=请选择本地路径
workspace.validation.git.url.required=请输入 Git 仓库地址
workspace.validation.auth.required=请输入认证信息
# 语言
language.changed=语言切换成功。部分界面元素可能需要重启才能完全更新。
# 更新相关
update.checking=正在检查更新...
update.latest_version=当前已是最新版本 ({0})
update.new_version_found=发现新版本：{0}\n请选择升级方式：
update.manual_download=手动下载
update.auto_download=自动下载并安装
update.cancel=取消
update.downloading=自动下载并安装
update.connecting=正在连接服务器...
update.download_progress=下载进度：{0} / {1} MB
update.download_speed=下载速度：{0} KB/s
update.estimated_time=预估时间：{0} s
update.cancel_download=取消下载
update.retry=重试
update.download_cancelled=下载已取消。
update.download_failed=下载失败：{0}
update.install_prompt=安装包已下载，是否立即打开安装？\n请确保已关闭所有 EasyPostman 程序，否则安装可能失败。\n点击"是"将自动关闭本程序并打开安装包。
update.open_installer_failed=打开安装包失败：{0}
update.no_installer_found=未找到最新安装包（.msi/.dmg）下载链接。
# 错误信息
error.network=网络错误，状态码：{0}
error.update_failed=检查更新失败：{0}
error.no_version_info=未获取到最新版本信息。
error.open_log_message=打开日志目录失败。请检查日志。
error.open_link_failed=打开链接失败：{0}
error.network_timeout=网络连接超时，请检查网络后重试。
error.server_unreachable=无法连接服务器，请检查网络。
error.invalid_download_link=下载链接无效或文件不存在。
error.disk_space_insufficient=磁盘空间不足，请清理后重试。
error.permission_denied=没有写入权限，请检查文件夹权限。
error.io_exception=下载文件时发生IO异常：{0}
# 关于对话框
about.version=版本：{0}
about.author=作者：lakernote
about.license=协议：Apache-2.0
about.wechat=微信：lakernote
about.blog=博客：https://laker.blog.csdn.net
about.github=GitHub：https://github.com/lakernote
about.gitee=Gitee：https://gitee.com/lakernote
# 反馈
feedback.message=请通过 Gitee 或 GitHub 提交问题。
feedback.title=反馈
# 通用
general.error=错误
general.info=信息
general.tip=提示
general.ok=确定
console.title=控制台
sidebar.toggle=展开/收起侧边栏
# Buttons
button.send=发送
button.save=保存
button.save.tooltip=保存当前请求
button.cancel=取消
button.close=关闭
button.start=开始
button.stop=停止
button.search=搜索...
new.request=新请求
create.new.request=创建新请求
save.request=保存请求
request.name=请求名称：
select.group=选择分组：
please.enter.request.name=请输入请求名称
please.select.group=请选择分组
please.select.valid.group=请选择有效的分组节点
request.saved=请求已保存
success=成功
update.request=更新请求
update.current.request=是否更新当前请求?\n名称: {0}
update.request.failed=更新请求失败
error=错误
clipboard.curl.detected=检测到剪贴板有 cURL 命令，是否导入到新请求？
import.curl=导入cURL
parse.curl.error=解析cURL出错: {0}
tip=提示
tab.params=参数
tab.authorization=认证
tab.scripts=脚本
tab.cookies=Cookie
tab.tests=测试
tab.network_log=网络日志
tab.request_headers=请求头
tab.request_body=请求体
tab.response_headers=响应头
tab.response_body=响应体
status.canceled=状态：已取消
status.requesting=状态：请求中...
status.duration=耗时：%s
status.response_size=响应大小：--
status.prefix=状态：{0}
websocket.failed=WebSocket连接失败: {0}
websocket.error=WebSocket发生错误: {0}
websocket.not_connected=WebSocket未连接，请先建立连接。
sse.switch.tip=检测到 SSE 响应，是否切换到 SSE 监听模式？\n同意后将自动在 Header 区域增加 Accept: text/event-stream。
sse.switch.title=SSE切换提示
sse.header.added=已自动添加 SSE 头部，即将重新发起请求。
operation.tip=操作提示
sse.failed=SSE连接失败: {0}
sse.error=SSE发生错误: {0}
ws.icon.connected=[+]:
ws.icon.received=[↓]:
ws.icon.binary=[#]:
ws.icon.sent=[↑]:
ws.icon.closed=[-]:
ws.icon.warning=[!]:
ws.icon.info=[i]:
script.tab.prescript=前置脚本
script.tab.postscript=后置脚本
script.tab.help=帮助
script.button.snippets=代码片段
script.help.text=PreScript/PostScript 可用变量：\nrequest, env, postman/pm, responseBody, responseHeaders, status, statusCode 等。\n可在脚本中通过 pm.environment.set('key', 'value') 设置环境变量。\n详细用法请参考文档或悬停提示。\n\n【Tab 补全说明】\n- 输入 pm. 后按 Tab 可快速补全 pm 相关方法，如 pm.environment.set。\n- 输入 console.log 后按 Tab 可快速插入日志代码片段。\n- 输入 JSON.parse(responseBody) 后按 Tab 可快速插入解析响应体的代码。\n- 还支持 if、for、function 等常用 JS 语句的补全。\n- 鼠标悬停在补全项上可查看详细说明。\n\n示例：\npm.environment.set('token', '123');\nconsole.log('调试信息');\nvar obj = JSON.parse(responseBody);\nif (statusCode === 200) {\n    // 处理成功\n}\n
auth.type.label=认证类型：
auth.type.none.desc=此请求不使用任何认证。
auth.username=用户名：
auth.password=密码：
auth.token=令牌：
cookie.button.delete=删除
cookie.button.clear=清空全部
cookie.button.add=添加
cookie.button.refresh=刷新
cookie.tooltip.add=添加新Cookie
cookie.tooltip.delete=删除选中Cookie
cookie.tooltip.clear=清空所有Cookie
cookie.tooltip.refresh=刷新Cookie列表
cookie.dialog.clear_confirm=确定要清空所有Cookie吗？
cookie.dialog.clear_confirm_title=确认
cookie.dialog.add_title=添加Cookie
cookie.dialog.error.empty=名称和域名不能为空
cookie.dialog.error.title=错误
env.button.import=导入
env.button.export=导出
env.button.save=保存
env.button.add=新增环境
env.button.rename=重命名
env.button.duplicate=复制
env.button.delete=删除
env.button.export_postman=导出为Postman
env.menu.import_easy=从EasyPostman导入
env.menu.import_postman=从Postman导入
env.dialog.save_changes=存在环境变量修改，是否保存？
env.dialog.save_changes.title=提示
env.dialog.save_success=环境变量保存成功！
env.dialog.save_success.title=保存成功
env.dialog.export.title=导出环境变量
env.dialog.export.success=导出成功！
env.dialog.export.fail=导出失败: {0}
env.dialog.import_easy.title=导入EasyPostman环境变量
env.dialog.import_easy.success=导入成功！
env.dialog.import_easy.fail=导入失败: {0}
env.dialog.import_postman.title=导入Postman环境变量
env.dialog.import_postman.fail=导入失败: {0}
env.dialog.import_postman.invalid=未解析到有效环境
env.dialog.add.title=新增环境
env.dialog.add.prompt=请输入环境名称:
env.dialog.rename.title=重命名环境
env.dialog.rename.prompt=请输入新的环境名称:
env.dialog.rename.success=环境名称已更新
env.dialog.rename.fail=环境名称不能为空或未更改
env.dialog.delete.title=删除环境
env.dialog.delete.prompt=确定要删除环境 "{0}" 吗?\n此操作不可恢复。
env.dialog.copy.fail=复制失败: {0}
env.name.copy_suffix=副本
env.dialog.export_postman.title=导出为Postman环境
env.dialog.export_postman.success=成功导出为Postman环境！
env.dialog.export_postman.fail=导出为Postman环境失败: {0}
# 功能测试相关
functional.tab.request_config=请求配置
functional.tab.execution_results=执行结果
button.load=加载
button.clear=清空
button.refresh=刷新
functional.msg.no_runnable_request=没有可运行的请求
functional.msg.csv_detected=检测到 CSV 数据文件，包含 {0} 行数据。\n是否使用 CSV 数据进行数据驱动测试？\n选择'是'将为每行数据执行一次所有选中的请求。
functional.msg.csv_title=CSV 数据驱动测试
functional.status.not_executed=未执行
functional.status.pre_script_failed=前置脚本失败
functional.status.sse_batch_not_supported=SSE请求，无法批量执行
functional.status.ws_batch_not_supported=WebSocket请求，无法批量执行
# 性能测试相关
performance.tab.trend=趋势
performance.tab.report=报表
performance.tab.result_tree=结果树
performance.tab.request=请求
performance.tab.response=响应
performance.tab.tests=断言
performance.tab.timing=耗时
performance.tab.event_info=事件信息
performance.no_assertion_results=<html><body><i>无断言结果</i></body></html>
performance.no_timing_info=<html><body><i>无耗时信息</i></body></html>
performance.no_event_info=<html><body><i>无事件信息</i></body></html>
performance.property.select_node=请在左侧选择节点进行编辑
performance.efficient_mode=高效模式
performance.efficient_mode.tooltip=只记录错误结果以减少内存占用
performance.efficient_mode.help=高效模式说明
performance.efficient_mode.desc=高效模式：\n只记录断言失败或请求异常的结果，极大减少内存占用。适合高并发/大循环压测。可扩展更多性能相关配置。
performance.efficient_mode.help_title=高效模式说明
performance.progress.tooltip=活跃线程数 / 总线程数
performance.menu.add_thread_group=添加用户组
performance.menu.add_request=添加请求
performance.menu.add_assertion=添加断言
performance.menu.add_timer=添加定时器
performance.menu.rename=重命名
performance.menu.delete=删除
performance.msg.select_thread_group=请选择线程组节点进行添加
performance.msg.rename_node=重命名节点：
performance.msg.execution_interrupted=执行被中断: {0}
performance.msg.pre_script_failed=前置脚本执行失败: {0}
performance.msg.request_failed=请求执行失败: {0}
performance.msg.assertion_failed=断言失败: {0} - {1}
performance.trend.threads=线程数
performance.trend.response_time_ms=响应时间 (毫秒)
performance.trend.response_time=响应时间
performance.trend.qps=QPS
performance.trend.error_rate_percent=错误率 (%)
performance.trend.error_rate=错误率
performance.trend.chart_title=API 性能趋势
performance.trend.time=时间
performance.trend.metric_value=指标值
performance.trend.metrics=指标：
performance.trend.no_metric_selected=未选择指标
performance.test_plan=测试计划
performance.thread_group=用户组
performance.default_request=百度首页
history.empty_body=<html><body>请选择一条记录。</body></html>
history.today=今天
history.yesterday=昨天
history.request_time=请求时间: {0}
app.name=EasyPostman
splash.status.starting=正在启动 EasyPostman...
splash.status.loading_main=正在加载主窗口...
splash.status.initializing=正在初始化组件...
splash.status.ready=准备就绪
splash.status.done=完成，正在显示主窗口...
splash.error.load_main=主窗口加载失败，请重启应用程序。
exit.unsaved_changes=存在未保存的更改，是否全部保存？
exit.unsaved_changes.title=未保存的更改
exit.confirm=确定要退出吗？
exit.title=退出
collections.export.tooltip=导出请求集合
collections.import.tooltip=导入请求集合
collections.import.curl.detected=检测到剪贴板有 cURL 命令，是否导入？
collections.import.curl.title=导入cURL
collections.import.easy=从EasyPostman导入
collections.import.easy.tooltip=导入EasyPostman导出的集合
collections.import.postman=从Postman v2.1导入
collections.import.postman.tooltip=导入Postman v2.1导出的集合
collections.import.curl=从cURL导入
collections.import.curl.tooltip=粘贴cURL命令导入请求
collections.menu.add_group=新增分组
collections.menu.add_request=新增请求
collections.menu.duplicate=复制
collections.menu.export_postman=导出为Postman v2.1
collections.menu.copy_curl=复制为cURL
collections.menu.rename=重命名
collections.menu.delete=删除
collections.menu.copy_suffix=副本
collections.menu.copy_curl.success=cURL命令已复制到剪贴板！
collections.menu.copy_curl.fail=生成cURL命令失败: {0}
collections.menu.export_postman.select_group=请选择分组节点导出
collections.menu.export_postman.dialog_title=导出为Postman集合
collections.export.dialog_title=导出请求集合
collections.export.success=导出成功！
collections.export.fail=导出失败: {0}
collections.import.dialog_title=导入请求集合
collections.import.success=导入成功！
collections.import.fail=导入失败: {0}
collections.import.postman.dialog_title=从Postman导入
collections.import.postman.invalid=不是有效的Postman集合文件
collections.import.curl.dialog_title=从cURL导入
collections.import.curl.dialog_prompt=请输入cURL命令:
collections.import.curl.parse_fail=无法解析cURL命令
collections.import.curl.parse_error=解析cURL出错: {0}
collections.dialog.add_group.prompt=请输入集合名称:
collections.dialog.rename_group.prompt=输入新的组名：
collections.dialog.rename_group.empty=组名不能为空！
collections.dialog.rename_request.prompt=输入新的请求名：
collections.dialog.rename_request.empty=请求名不能为空！
collections.dialog.multi_select.title=多选请求
collections.dialog.multi_select.empty=请至少选择一个请求
collections.delete.confirm=确定要删除所选项吗？
collections.delete.confirm_title=删除确认
general.error.message=发生未知错误，请查看日志文件获取详细信息。
# 功能测试执行结果相关
functional.execution.results=执行结果
functional.execution.history=执行历史
functional.execution.results.no_data=暂无执行数据
functional.execution.results.summary={0} 轮迭代，总耗时 {1}
functional.button.expand_all=全部展开
functional.button.collapse_all=全部收起
functional.tooltip.expand_all=展开所有节点
functional.tooltip.collapse_all=收起所有节点
functional.tooltip.refresh=刷新数据
functional.detail.info=详细信息
functional.tab.overview=概览
functional.status.ready=就绪
functional.status.updating=正在更新数据...
functional.status.updated=数据更新完成
functional.status.refreshing=正在刷新...
functional.status.refreshed=刷新完成
functional.status.iteration_selected=已选择迭代
functional.status.request_selected=已选择请求
functional.status.overview_selected=已选择概览
# 功能测试详情页面相关
functional.detail.overview=执行概览
functional.detail.iteration=迭代详情
functional.detail.execution_stats=执行统计
functional.detail.iteration_info=迭代信息
functional.detail.csv_data=CSV 数据
functional.detail.welcome_message=选择左侧的记录查看详细信息
functional.detail.welcome_subtitle=支持查看请求、响应、测试结果等
# 功能测试统计相关
functional.stats.total_iterations=总迭代数
functional.stats.total_requests=总请求数
functional.stats.total_time=总耗时
functional.stats.success_rate=成功率
functional.stats.start_time=开始时间
functional.stats.end_time=结束时间
functional.stats.average_time=平均耗时
functional.stats.status=状态
functional.stats.status_completed=已完成
# 功能测试表格相关
functional.table.iteration=迭代
functional.table.request_name=请求名称
functional.table.method=方法
functional.table.status=状态
functional.table.time=耗时
functional.table.assertion=断言
functional.table.timestamp=时间戳
# 功能测试迭代相关
functional.iteration.round=迭代轮次
functional.iteration.round.format=第 {0} 轮
functional.iteration.round.prefix=第
functional.iteration.round.suffix=轮
functional.iteration.start_time=开始时间
functional.iteration.execution_time=执行时长
functional.iteration.request_count=请求数量
functional.iteration.passed_format=第 {0} 轮 ({1}/{2} 通过, {3})
# ============ 线程组相关 ============
# 线程组模式
threadgroup.mode.fixed=固定线程数
threadgroup.mode.ramp_up=递增线程数
threadgroup.mode.spike=尖刺线程
threadgroup.mode.stairs=阶梯线程
# 线程组界面标签
threadgroup.mode.label=线程模式:
threadgroup.preview.title=负载模式预览
# 固定模式标签
threadgroup.fixed.users=用户数:
threadgroup.fixed.execution_mode=执行方式:
threadgroup.fixed.use_time=按时间
threadgroup.fixed.loops=循环次数:
threadgroup.fixed.duration=持续时间(秒):
# 递增模式标签
threadgroup.rampup.start_users=起始用户数:
threadgroup.rampup.end_users=最终用户数:
threadgroup.rampup.ramp_time=递增时间(秒):
threadgroup.rampup.test_duration=测试持续(秒):
# 尖刺模式标签
threadgroup.spike.min_users=最小用户数:
threadgroup.spike.max_users=最大用户数:
threadgroup.spike.ramp_up_time=上升时间(秒):
threadgroup.spike.hold_time=保持时间(秒):
threadgroup.spike.ramp_down_time=下降时间(秒):
threadgroup.spike.test_duration=测试持续(秒):
# 阶梯模式标签
threadgroup.stairs.start_users=起始用户数:
threadgroup.stairs.end_users=最终用户数:
threadgroup.stairs.step_size=阶梯步长:
threadgroup.stairs.hold_time=阶梯保持(秒):
threadgroup.stairs.test_duration=测试持续(秒):
# 预览面板标签
threadgroup.preview.time_seconds=时间 (秒)
threadgroup.preview.mode_prefix=模式:
# ============ 设置对话框相关 ============
# 对话框标题和标签
settings.dialog.title=全局设置
settings.dialog.save=保存
settings.dialog.cancel=取消
# 请求设置部分
settings.request.title=请求设置
settings.request.max_body_size=响应体最大显示大小 (KB):
settings.request.max_body_size.tooltip=响应体内容最大显示多少 KB，超出将被截断
settings.request.timeout=请求超时时间 (ms, 0=永不超时):
settings.request.timeout.tooltip=接口请求超时时间，0 表示不限制
settings.request.max_download_size=最大响应下载大小 (MB, 0=不限制):
settings.request.max_download_size.tooltip=下载响应体最大允许大小，0 表示不限制
settings.request.follow_redirects=自动重定向 (Follow Redirects):
settings.request.follow_redirects.tooltip=请求遇到重定向时是否自动跟随跳转
settings.request.follow_redirects.checkbox=自动重定向
# JMeter设置部分
settings.jmeter.title=压测连接设置
settings.jmeter.max_idle=最大空闲连接数:
settings.jmeter.max_idle.tooltip=线程池最大空闲连接数
settings.jmeter.keep_alive=连接保活时间 (秒):
settings.jmeter.keep_alive.tooltip=连接最大保活时间，单位秒
# 下载设置部分
settings.download.title=下载设置
settings.download.show_progress=下载大文件时显示进度弹窗
settings.download.show_progress.tooltip=下载大文件时弹出进度提示窗口
settings.download.threshold=进度弹窗阈值 (MB):
settings.download.threshold.tooltip=下载文件大于此阈值时弹窗
# 通用设置部分
settings.general.title=通用设置
settings.general.max_history=最大历史记录数量:
settings.general.max_history.tooltip=保存的最大历史记录条数
# 验证消息
settings.validation.error.title=验证错误
settings.validation.max_body_size.error=响应体大小不能小于0
settings.validation.timeout.error=超时时间不能小于0
settings.validation.max_download_size.error=下载大小不能小于0
settings.validation.max_idle.error=最大连接数必须大于0
settings.validation.keep_alive.error=连接保活时间必须大于0
settings.validation.threshold.error=进度弹窗阈值不能小于0
settings.validation.max_history.error=历史记录数量必须大于0
settings.validation.invalid_number=请输入有效的数字
# 成功消息
settings.save.success=设置已保存
settings.save.success.title=成功
tab.close_others=关闭其他
tab.close_all=关闭全部
tab.unsaved_changes.save_current=当前标签有未保存的更改，是否保存后关闭？
tab.unsaved_changes.save_others=其他标签有未保存的更改，是否保存后关闭？
tab.unsaved_changes.save_all=有标签存在未保存的更改，是否全部保存后关闭？
tab.unsaved_changes.title=未保存的更改
tab.close_current=关闭当前
request.body.type=类型：
request.body.format=格式：
request.body.none=该请求无Body
request.body.send_message=发送消息
request.body.format.only_raw=仅Raw类型Body可格式化
request.body.format.empty=Body为空，无法格式化
request.body.format.invalid_json=Body不是有效的JSON，无法格式化
response.headers.copy_selected=复制选中
response.headers.copy_cell=复制单元格
response.headers.copy_all=复制全部
response.headers.select_all=全选
# ============ CSV 数据面板相关 ============
csv.status.no_data=未加载 CSV 数据
csv.status.loaded=CSV: {0} ({1} 行数据)
csv.manual_created=手动创建
csv.button.clear.tooltip=清除 CSV 数据
csv.menu.import_file=导入 CSV 文件
csv.menu.manage_data=管理 CSV 数据
csv.menu.clear_data=清除 CSV 数据
csv.data.cleared=CSV 数据已清除
csv.dialog.management.title=CSV数据管理
csv.data_driven_test=CSV数据驱动测试
csv.dialog.description=CSV 数据驱动测试允许您使用外部数据文件为每行数据执行一次测试。\n• CSV 文件第一行应为列标题\n• 支持两种使用方式：\n  1. 在请求URL、Header、Body中直接使用 {{列名}} 占位符\n  2. 在脚本中使用 pm.variables.get('列名') 访问数据\n• 支持的编码：UTF-8
csv.current_status=当前状态
csv.operations=操作
csv.button.select_file=选择 CSV 文件
csv.button.manage_data=管理数据
csv.button.clear_data=清除数据
csv.no_manageable_data=没有可管理的 CSV 数据
csv.data_management=CSV数据管理
csv.data_source_info=<html>数据来源: <b>{0}</b> | 行数: <b>{1}</b></html>
csv.button.add_row=添加行
csv.button.delete_row=删除行
csv.button.add_column=添加列
csv.button.delete_column=删除列
csv.select_rows_to_delete=请先选择要删除的行
csv.confirm_delete_rows=确定要删除选中的 {0} 行数据吗？
csv.confirm_delete=确认删除
csv.enter_column_name=请输入新列名:
csv.add_column=添加列
csv.select_columns_to_delete=请先选择要删除的列
csv.cannot_delete_all_columns=不能删除所有列，至少需要保留一列
csv.confirm_delete_columns=确定要删除选中的列吗？\n列名: {0}
csv.usage_instructions=使用说明
csv.usage_text=• 双击单元格可直接编辑内容\n• 支持两种使用方式：{{列名}} 占位符 或 pm.variables.get('列名')\n• 例如：URL中使用 {{baseUrl}}/users 或脚本中使用 pm.variables.get('userId')
csv.no_valid_data_rows=没有有效的数据行，请至少添加一行数据
csv.data_saved=数据已保存！共 {0} 行数据，{1} 列
csv.save_success=保存成功
csv.save_failed=保存数据失败: {0}
csv.select_file=选择 CSV 文件
csv.file_filter=CSV 文件 (*.csv)
csv.file_validation_failed=文件验证失败
csv.no_valid_data=CSV 文件没有有效数据
csv.load_failed=读取 CSV 文件失败: {0}
csv.file_not_exist=文件不存在
csv.file_not_valid=不是有效的文件
csv.file_not_csv=不是 CSV 文件
download.progress.title=下载进度
download.cancelled=下载已取消。
binary.too_large=二进制内容大小 {0}MB 超出最大下载限制（{1} MB）
binary.too_large.body=[二进制内容超出最大下载限制，未下载。限制：{0} MB]
binary.saved_temp_file=[二进制内容，已保存为临时文件]
no.response.body=[无响应体]
download.limit.title=下载限制
text.too_large=文本内容大小 {0}MB 超出最大下载限制（{1} MB）
text.too_large.body=[文本内容超出最大下载限制，未下载。限制：{0} MB]
body.too_large.saved=[响应体内容超过{0}KB，已保存为临时文件，可下载查看完整内容]
sse.stream.unsupported=[SSE 流响应，无法直接处理]
# ResponseAssertion 国际化
response.assertion.status_failed=响应状态码断言失败: 期望={0}, 实际={1}
response.assertion.header_not_found=响应头不存在
response.assertion.header_not_found_with_name=响应头不存在: {0}
response.assertion.below_failed=响应耗时断言失败: 期望小于{0}, 实际={1}
response.assertion.invalid_json=响应体不是有效的JSON: {0}
# Expectation 国际化
expectation.include_failed=include断言失败: 期望包含={0}, 实际={1}
expectation.eql_failed=eql断言失败: 期望={0}, 实际={1}
expectation.property_not_found=property断言失败: 不存在属性={0}
expectation.property_not_map=property断言失败: actual不是Map类型
expectation.match_regex_failed=match断言失败: 正则={0}, 实际={1}
expectation.match_pattern_failed=match断言失败: pattern={0}, 实际={1}
expectation.match_jsregexp_failed=match断言失败: 非法JavaScript正则对象={0}, 实际={1}
expectation.below_failed=below断言失败: 期望小于={0}, 实际={1}
autocomplete.pm=Postman pm 对象，常用断言/环境操作
autocomplete.postman=Postman 旧版对象
autocomplete.request=请求对象
autocomplete.response=响应对象
autocomplete.env=环境变量对象
autocomplete.response_body=响应体字符串
autocomplete.response_headers=响应头对象
autocomplete.status=响应状态
autocomplete.status_code=响应状态码
autocomplete.set_env=设置环境变量
autocomplete.get_env=获取环境变量
autocomplete.if=条件语句
autocomplete.else=条件语句
autocomplete.for=循环语句
autocomplete.while=循环语句
autocomplete.function=函数定义
autocomplete.return=返回语句
autocomplete.snippet.set_env=设置环境变量
autocomplete.snippet.get_env=获取环境变量
autocomplete.snippet.btoa=将字符串转换为 Base64 编码
autocomplete.snippet.atob=将 Base64 编码转换为字符串
autocomplete.snippet.encode_uri=对字符串进行 URL 编码
autocomplete.snippet.decode_uri=对 URL 编码的字符串进行解码
autocomplete.snippet.console_log=打印日志
autocomplete.snippet.json_parse=解析响应体为 JSON 对象
autocomplete.snippet.json_stringify=将对象转换为 JSON 字符串
