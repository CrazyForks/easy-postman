name: Release Build（发布构建）

permissions:
  contents: write

on:
  release:
    types: [created]  # 当创建新的 Release 时触发
  workflow_dispatch: {}  # 支持手动触发

jobs:
  build-windows:
    name: Build Windows MSI（构建 Windows 安装包）
    runs-on: windows-latest

    steps:
      - name: Checkout（检出代码）
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)（配置 Java 17 环境）
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Install WiX (for jpackage)（安装 WiX 工具集，用于创建 MSI）
        shell: pwsh
        run: |
          choco install wixtoolset -y
          if (Get-Command refreshenv -ErrorAction SilentlyContinue) { 
            refreshenv 
          } else {
            $refreshScript = "$env:ChocolateyInstall\lib\refreshenv\tools\RefreshEnv.ps1"
            if (Test-Path $refreshScript) { & $refreshScript }
          }

      - name: Get version from pom.xml（从 pom.xml 提取版本号）
        id: get_version
        shell: pwsh
        run: |
          [xml]$pom = Get-Content 'pom.xml'
          $version = $pom.project.version
          Write-Host "Version: $version"
          "version=$version" | Out-File -Encoding utf8 -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build with Maven（使用 Maven 构建项目）
        shell: pwsh
        run: |
          mvn -B clean package -DskipTests

      - name: Create runtime with jlink（使用 jlink 创建精简的 JRE）
        shell: pwsh
        run: |
          $runtimeDir = "target\runtime"
          if (Test-Path $runtimeDir) { Remove-Item -Recurse -Force $runtimeDir }
          
          # 创建包含必要模块的精简运行时环境
          jlink `
            --add-modules java.base,java.desktop,java.logging,jdk.unsupported,java.naming,java.net.http,java.prefs,java.sql,java.security.sasl,java.security.jgss,jdk.crypto.ec,java.management,java.management.rmi,jdk.crypto.cryptoki `
            --strip-debug `
            --no-header-files `
            --no-man-pages `
            --compress=2 `
            --output $runtimeDir

      - name: Prepare dist-input（准备打包输入目录）
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $jarName = "easy-postman-$version.jar"
          
          $distInputDir = "target\dist-input"
          if (Test-Path $distInputDir) { Remove-Item -Recurse -Force $distInputDir }
          New-Item -ItemType Directory -Path $distInputDir | Out-Null
          
          Copy-Item "target\$jarName" -Destination $distInputDir

      - name: Create MSI with jpackage（使用 jpackage 创建 MSI 安装包）
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $jarName = "easy-postman-$version.jar"
          $outDir = "dist"
          
          if (-not (Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir | Out-Null }
          
          # 创建 Windows MSI 安装包
          jpackage `
            --type msi `
            --input target\dist-input `
            --main-jar $jarName `
            --main-class com.laker.postman.App `
            --runtime-image target\runtime `
            --dest $outDir `
            --icon assets\win\EasyPostman.ico `
            --name EasyPostman `
            --app-version $version `
            --vendor "Laker" `
            --copyright "© 2025 Laker" `
            --win-shortcut `
            --win-menu `
            --win-upgrade-uuid "28607609-97b7-4212-9285-04ef64a4946c" `
            --win-dir-chooser `
            --win-per-user-install `
            --win-menu-group "EasyTools" `
            --win-help-url "https://gitee.com/lakernote/easy-postman" `
            --java-options "-Xms256m" `
            --java-options "-Xmx512m" `
            --java-options "-Dfile.encoding=UTF-8" `
            --java-options "-Djavax.accessibility.assistive_technologies="

      - name: Upload to Release（上传到 GitHub Release）
        if: github.event_name == 'release'  # 只在 Release 触发时上传
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.msi
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload as Artifact（手动触发时上传为构建产物）
        if: github.event_name == 'workflow_dispatch'  # 只在手动触发时上传为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: EasyPostman-Windows-MSI
          path: dist/*.msi
          retention-days: 7  # 保留 7 天

      - name: Upload MSI for Gitee sync（上传 MSI 供 Gitee 同步使用）
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: release-msi
          path: dist/*.msi
          retention-days: 1

  build-macos:
    name: Build macOS Universal DMG（构建 macOS 通用版安装包）
    runs-on: macos-latest  # Apple Silicon (M1/M2/M3)

    steps:
      - name: Checkout（检出代码）
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)（配置 Java 17 环境）
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Get version from pom.xml（从 pom.xml 提取版本号）
        id: get_version
        run: |
          VERSION=$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Maven（使用 Maven 构建项目）
        run: |
          mvn -B clean package -DskipTests

      - name: Create runtime with jlink（使用 jlink 创建精简的 JRE）
        run: |
          rm -rf target/runtime
          # 创建包含必要模块的精简运行时环境
          jlink \
            --add-modules java.base,java.desktop,java.logging,jdk.unsupported,java.naming,java.net.http,java.prefs,java.sql,java.security.sasl,java.security.jgss,jdk.crypto.ec,java.management,java.management.rmi,jdk.crypto.cryptoki \
            --strip-debug \
            --no-header-files \
            --no-man-pages \
            --compress=2 \
            --output target/runtime

      - name: Prepare dist-input（准备打包输入目录）
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          JAR_NAME="easy-postman-$VERSION.jar"
          
          rm -rf target/dist-input
          mkdir -p target/dist-input
          cp target/$JAR_NAME target/dist-input/

      - name: Create DMG with jpackage（使用 jpackage 创建 DMG 镜像）
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          JAR_NAME="easy-postman-$VERSION.jar"
          
          mkdir -p dist
          
          # 创建 macOS Universal Binary DMG（同时支持 Intel 和 Apple Silicon）
          jpackage \
            --input target/dist-input \
            --main-jar $JAR_NAME \
            --main-class com.laker.postman.App \
            --runtime-image target/runtime \
            --type dmg \
            --name "EasyPostman" \
            --app-version "$VERSION" \
            --dest dist \
            --icon assets/mac/EasyPostman.icns \
            --vendor "Laker" \
            --copyright "© 2025 Laker" \
            --java-options "-Xms256m" \
            --java-options "-Xmx512m" \
            --java-options "-Dfile.encoding=UTF-8"

      - name: Upload to Release（上传到 GitHub Release）
        if: github.event_name == 'release'  # 只在 Release 触发时上传
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.dmg
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload as Artifact（手动触发时上传为构建产物）
        if: github.event_name == 'workflow_dispatch'  # 只在手动触发时上传为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: EasyPostman-macOS-DMG
          path: dist/*.dmg
          retention-days: 7  # 保留 7 天

      - name: Upload DMG for Gitee sync（上传 DMG 供 Gitee 同步使用）
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: release-dmg
          path: dist/*.dmg
          retention-days: 1

  build-ubuntu:
    name: Build Ubuntu DEB（构建 Ubuntu 安装包）
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout（检出代码）
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)（配置 Java 17 环境）
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Install dependencies（安装系统依赖）
        run: |
          sudo apt-get update
          # 安装 GTK3、WebKit 和打包工具
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev binutils

      - name: Get version from pom.xml（从 pom.xml 提取版本号）
        id: get_version
        run: |
          VERSION=$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Maven（使用 Maven 构建项目）
        run: |
          mvn -B clean package -DskipTests

      - name: Create runtime with jlink（使用 jlink 创建精简的 JRE）
        run: |
          rm -rf target/runtime
          # 创建包含必要模块的精简运行时环境
          jlink \
            --add-modules java.base,java.desktop,java.logging,jdk.unsupported,java.naming,java.net.http,java.prefs,java.sql,java.security.sasl,java.security.jgss,jdk.crypto.ec,java.management,java.management.rmi,jdk.crypto.cryptoki \
            --strip-debug \
            --no-header-files \
            --no-man-pages \
            --compress=2 \
            --output target/runtime

      - name: Prepare dist-input（准备打包输入目录）
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          JAR_NAME="easy-postman-$VERSION.jar"
          
          rm -rf target/dist-input
          mkdir -p target/dist-input
          cp target/$JAR_NAME target/dist-input/

      - name: Create DEB with jpackage（使用 jpackage 创建 DEB 安装包）
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          JAR_NAME="easy-postman-$VERSION.jar"
          
          mkdir -p dist
          
          # 创建 Ubuntu/Debian DEB 安装包
          jpackage \
            --input target/dist-input \
            --main-jar $JAR_NAME \
            --main-class com.laker.postman.App \
            --runtime-image target/runtime \
            --type deb \
            --name "EasyPostman" \
            --app-version "$VERSION" \
            --dest dist \
            --vendor "Laker" \
            --copyright "© 2025 Laker" \
            --description "A modern API testing tool similar to Postman" \
            --linux-shortcut \
            --linux-menu-group "Development" \
            --linux-app-category "Development" \
            --java-options "-Xms256m" \
            --java-options "-Xmx512m" \
            --java-options "-Dfile.encoding=UTF-8"

      - name: Upload to Release（上传到 GitHub Release）
        if: github.event_name == 'release'  # 只在 Release 触发时上传
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.deb
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload as Artifact（手动触发时上传为构建产物）
        if: github.event_name == 'workflow_dispatch'  # 只在手动触发时上传为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: EasyPostman-Ubuntu-DEB
          path: dist/*.deb
          retention-days: 7  # 保留 7 天

      - name: Upload DEB for Gitee sync（上传 DEB 供 Gitee 同步使用）
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: release-deb
          path: dist/*.deb
          retention-days: 1

  sync-to-gitee:
    name: Sync to Gitee Release（同步到 Gitee Release）
    if: github.event_name == 'release'
    needs: [build-windows, build-macos, build-ubuntu]  # 等待所有构建完成
    runs-on: ubuntu-latest

    steps:
      - name: Download all release artifacts（下载所有发布产物）
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag（从标签获取版本号）
        id: get_version
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION="${TAG_NAME#v}"  # 移除 v 前缀
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create or get Gitee Release（创建或获取 Gitee Release）
        id: gitee_release
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="${{ steps.get_version.outputs.tag }}"
          
          echo "Creating/Getting Gitee Release for tag: $TAG_NAME"
          
          # 检查 Release 是否存在
          RELEASE_URL="https://gitee.com/api/v5/repos/lakernote/easy-postman/releases/tags/$TAG_NAME?access_token=${{ secrets.GITEE_TOKEN }}"
          
          if curl -s -f "$RELEASE_URL" > /tmp/release.json; then
            echo "Release already exists"
            RELEASE_ID=$(cat /tmp/release.json | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          else
            echo "Creating new release on Gitee..."
            RELEASE_ID=$(curl -s -X POST "https://gitee.com/api/v5/repos/lakernote/easy-postman/releases" \
              -H "Content-Type: application/json" \
              -d "{
                \"access_token\": \"${{ secrets.GITEE_TOKEN }}\",
                \"tag_name\": \"$TAG_NAME\",
                \"name\": \"EasyPostman $VERSION\",
                \"body\": \"${{ github.event.release.body }}\",
                \"prerelease\": false,
                \"target_commitish\": \"master\"
              }" | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          fi
          
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "Gitee Release ID: $RELEASE_ID"

      - name: Upload MSI to Gitee（上传 MSI 到 Gitee）
        run: |
          RELEASE_ID="${{ steps.gitee_release.outputs.release_id }}"
          MSI_FILE=$(find artifacts/release-msi -name "*.msi" | head -n 1)
          
          if [ -z "$MSI_FILE" ]; then
            echo "⚠️ MSI file not found, skipping..."
            exit 0
          fi
          
          echo "📦 Uploading $(basename $MSI_FILE) to Gitee..."
          
          curl -X POST "https://gitee.com/api/v5/repos/lakernote/easy-postman/releases/$RELEASE_ID/attach_files" \
            -F "access_token=${{ secrets.GITEE_TOKEN }}" \
            -F "file=@$MSI_FILE"
          
          echo "✅ MSI uploaded successfully!"

      - name: Upload DMG to Gitee（上传 DMG 到 Gitee）
        run: |
          RELEASE_ID="${{ steps.gitee_release.outputs.release_id }}"
          DMG_FILE=$(find artifacts/release-dmg -name "*.dmg" | head -n 1)
          
          if [ -z "$DMG_FILE" ]; then
            echo "⚠️ DMG file not found, skipping..."
            exit 0
          fi
          
          echo "📦 Uploading $(basename $DMG_FILE) to Gitee..."
          
          curl -X POST "https://gitee.com/api/v5/repos/lakernote/easy-postman/releases/$RELEASE_ID/attach_files" \
            -F "access_token=${{ secrets.GITEE_TOKEN }}" \
            -F "file=@$DMG_FILE"
          
          echo "✅ DMG uploaded successfully!"

      - name: Upload DEB to Gitee（上传 DEB 到 Gitee）
        run: |
          RELEASE_ID="${{ steps.gitee_release.outputs.release_id }}"
          DEB_FILE=$(find artifacts/release-deb -name "*.deb" | head -n 1)
          
          if [ -z "$DEB_FILE" ]; then
            echo "⚠️ DEB file not found, skipping..."
            exit 0
          fi
          
          echo "📦 Uploading $(basename $DEB_FILE) to Gitee..."
          
          curl -X POST "https://gitee.com/api/v5/repos/lakernote/easy-postman/releases/$RELEASE_ID/attach_files" \
            -F "access_token=${{ secrets.GITEE_TOKEN }}" \
            -F "file=@$DEB_FILE"
          
          echo "✅ DEB uploaded successfully!"

      - name: Summary（汇总）
        run: |
          echo "🎉 All packages have been synced to Gitee Release!"
          echo "📍 Release URL: https://gitee.com/lakernote/easy-postman/releases/${{ steps.get_version.outputs.tag }}"

