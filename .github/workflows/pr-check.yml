name: PR Check

on:
  pull_request:
    branches:
      - main
      - master
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: easy-postman-jar
          path: target/*.jar
          retention-days: 7

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Check code formatting
        run: |
          echo "✅ Code formatting check passed"
          # 可以添加 spotless 或其他格式化检查工具

      - name: Verify compilation
        run: mvn clean compile

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ -z "$PR_TITLE" ]]; then
            echo "❌ PR title cannot be empty"
            exit 1
          fi
          echo "✅ PR title: $PR_TITLE"

      - name: Check PR description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          if [[ -z "$PR_BODY" || ${#PR_BODY} -lt 10 ]]; then
            echo "⚠️  Warning: PR description is too short or empty"
            echo "Please provide a detailed description of your changes"
          else
            echo "✅ PR description provided"
          fi

      - name: Check for conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q '<<<<<<<'; then
            echo "❌ This PR has merge conflicts. Please resolve them."
            exit 1
          else
            echo "✅ No merge conflicts detected"
          fi

  summary:
    name: Check Summary
    runs-on: ubuntu-latest
    needs: [build, code-quality, pr-validation]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## PR Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build and Test | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PR Validation | ${{ needs.pr-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" != "success" ]] || [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

